'''
---
 Game Rules and How to Play
---

 Objective:
    Defeat all 5 AI-controlled bots before they deplete your HP.

---

 Player Information:
    Starting HP: 500
    Mana: Starts at 0 (Max: 50)
    Special Attack: Requires 30 mana

---

 Player Moves:
    Punch (3 types):
        1: Front punch (40 damage)
        2: Jab (30 damage)
        3: Uppercut (60 damage)
        Note: Each punch gives 10 mana.

    Kick (3 types):
        1: High kick (45 damage)
        2: Low kick (35 damage)
        3: Sweep (20 damage)
        Note: Each kick gives 10 mana.

    Block:
        Prevents most bot attacks.
        Gives 20 mana.

    Special Attack:
        Deals 100 damage.
        Requires 30 mana.

---

 Bot Information:
    Starting HP: 100 each
    Actions:
        Punch
        Kick
        Block
    Bots use random strategies based on probabilities.

---

 Gameplay:
    Choose Your Move:
        Select from Punch, Kick, Block, or Special Attack.

    Sub-Move Selection:
        If you choose Punch or Kick, select the type (1, 2, or 3).

    Bot's Turn:
        Each surviving bot will attack or block.

    Mana Gain:
        Punch and Kick give 10 mana.
        Blocking gives 20 mana.

---

 Win Condition:
    Defeat all bots by reducing their HP to 0.

---

 Loss Condition:
    Your HP reaches 0 before defeating all bots.

---

 Tips:
        Use Blocks strategically to gain mana.
        Save mana for powerful Special Attacks.
        Balance offense and defense to survive multiple bot attacks.
'''

import random

PLAYER_HP = 500
BOT_HP = 100
MAX_MANA = 50
BLOCK_IGNORE_CHANCE = 0.35
bot_population = []


class Fighter:
    def __init__(self, hp):
        self.hp = hp
        self.mana = 0
        self.special_attack_used = False

    def punch(self, punch_type):
        punch_types = {
            1: 40,  # Front punch
            2: 30,  # Jab
            3: 60  # Uppercut
        }
        damage = self.apply_critical(punch_types[punch_type])
        self.gain_mana(10)
        return damage

    def kick(self, kick_type):
        kick_types = {
            1: 45,  # High kick
            2: 35,  # Low kick
            3: 20  # Sweep
        }
        damage = self.apply_critical(kick_types[kick_type])
        self.gain_mana(10)
        return damage

    def block(self):
        self.gain_mana(20)
        return 0

    def special_attack(self):
        if self.mana < 30:
            return None
        self.mana -= 30
        return self.apply_critical(100)

    def gain_mana(self, amount):
        self.mana = min(self.mana + amount, MAX_MANA)
        print(f"Player gained mana! Current mana: {self.mana}/{MAX_MANA}")

    def apply_critical(self, base_damage):
        if random.random() < 0.3:
            print("Critical hit!")
            return int(base_damage * 1.5)
        return base_damage


class BotGenome:
    def __init__(self):
        self.attack_probabilities = {
            'punch': random.uniform(0, 1),
            'kick': random.uniform(0, 1),
            'block': random.uniform(0, 1)
        }
        self.normalize_probabilities()

    def normalize_probabilities(self):
        total = sum(self.attack_probabilities.values())
        for key in self.attack_probabilities:
            self.attack_probabilities[key] /= total


class Bot(Fighter):
    def __init__(self, hp, bot_id):
        super().__init__(hp)
        self.genome = BotGenome()
        self.bot_id = bot_id

    def fight(self, player_move, subattack_type):
        bot_move = self.decide_move()
        if bot_move == 'punch':
            damage = self.punch(subattack_type) if subattack_type and not self.ignores_block(player_move) else 0
            print(f"Bot {self.bot_id} punches and deals {damage} damage.")
            return damage
        elif bot_move == 'kick':
            damage = self.kick(subattack_type) if subattack_type and not self.ignores_block(player_move) else 0
            print(f"Bot {self.bot_id} kicks and deals {damage} damage.")
            return damage
        else:
            print(f"Bot {self.bot_id} blocks.")
            return self.block()

    def decide_move(self):
        rand_val = random.random()
        cumulative_probability = 0.0
        for move, probability in self.genome.attack_probabilities.items():
            cumulative_probability += probability
            if rand_val < cumulative_probability:
                return move

    def ignores_block(self, player_move):
        if player_move == 'block':
            if random.random() < BLOCK_IGNORE_CHANCE:
                print(f"Bot {self.bot_id}'s attack ignores the player's block!")
                return False
            print("Player successfully blocks!")
            return True
        return False


def simulate_fight():
    global bot_population
    player = Fighter(PLAYER_HP)
    bot_population.clear()
    bot_population.extend(Bot(BOT_HP, i + 1) for i in range(5))
    round_num = 0

    while player.hp > 0 and any(bot.hp > 0 for bot in bot_population):
        print(f"\n--- Round {round_num + 1} ---")

        # Player's turn
        while True:
            try:
                player_move = int(input("Choose your move: (1=Punch, 2=Kick, 3=Block, 4=Special Attack): "))
                if player_move in [1, 2, 3, 4]:
                    if player_move == 4 and player.mana < 30:
                        print("Not enough mana for a special attack! Choose a different move.")
                        continue
                    break
                print("Invalid choice, please select a valid option.")
            except ValueError:
                print("Invalid input, please enter a number (1-4).")

        subattack_type = None
        if player_move == 1:
            subattack_type = int(input("Choose punch type: (1=Front punch, 2=Jab, 3=Uppercut): "))
            damage = player.punch(subattack_type)
        elif player_move == 2:
            subattack_type = int(input("Choose kick type: (1=High kick, 2=Low kick, 3=Sweep): "))
            damage = player.kick(subattack_type)
        elif player_move == 3:
            damage = player.block()
        elif player_move == 4:
            damage = player.special_attack()
            if damage is None:
                print("Not enough mana for a special attack! Choose again.")
                continue
            print(f"Special attack deals {damage} damage!")

        # Apply player's damage to bots
        if damage > 0:
            for bot in bot_population:
                if bot.hp > 0:
                    bot.hp -= damage / sum(bot.hp > 0 for bot in bot_population)
            print(f"Player deals {damage} total damage to bots.")

        # Bot's turn
        for bot in bot_population:
            if bot.hp > 0:
                print(f"\n--- Bot {bot.bot_id}'s Turn ---")
                bot_damage = bot.fight(player_move, subattack_type)
                if bot_damage > 0:
                    player.hp -= bot_damage
                    print(f"Bot {bot.bot_id} deals {bot_damage} damage to the player.")

        # Display remaining health
        print("\nRemaining Health:")
        print(f"Player HP: {player.hp}")
        for bot in bot_population:
            print(f"Bot {bot.bot_id} HP: {bot.hp}\n")

        round_num += 1

    # Match result
    winners = [bot for bot in bot_population if bot.hp > 0]
    print("\n--- Match Result ---")
    if player.hp > max(bot.hp for bot in bot_population):
        print("\nPlayer wins!")
    elif winners:
        print("\nBots win!")
    return winners


def main():
    global bot_population
    num_generations = int(input("Enter the number of generations to simulate: "))
    for generation in range(num_generations):
        print(f"\n--- Generation {generation + 1} ---")
        simulate_fight()


if __name__ == "__main__":
    main()
